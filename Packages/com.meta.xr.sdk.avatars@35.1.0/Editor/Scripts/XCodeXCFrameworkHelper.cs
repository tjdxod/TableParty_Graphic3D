/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * Licensed under the Oculus SDK License Agreement (the "License");
 * you may not use the Oculus SDK except in compliance with the License,
 * which is provided at the time of installation or download, or which
 * otherwise accompanies this software in either electronic or hard copy form.
 *
 * You may obtain a copy of the License at
 *
 * https://developer.oculus.com/licenses/oculussdk/
 *
 * Unless required by applicable law or agreed to in writing, the Oculus SDK
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#nullable enable

// This script adds .dylib library files to the xcode project
// generated by Unity.

#if UNITY_IOS

using System;
using System.IO;
using UnityEditor.iOS.Xcode;
using UnityEngine;
using System.Collections.Generic;

namespace Oculus.Avatar2
{
    public class XcodeXCFrameworkHelper
    {
        internal static void CopyDirectory(string srcPath, string destPath)
        {
            Directory.CreateDirectory(destPath);

            foreach (var file in Directory.GetFiles(srcPath))
            {
                File.Copy(file, Path.Combine(destPath, Path.GetFileName(file)));
            }

            foreach (var directory in Directory.GetDirectories(srcPath))
            {
                CopyDirectory(directory, Path.Combine(destPath, Path.GetFileName(directory)));
            }
        }

        // Create and add a "Copy Files" build phase to add the XCFrameworks to the Xcode project
        public static void AddXCFrameworksToXcodeProject(string pathToBuiltProject, string[] xcFrameworksPaths, string buildPhaseName)
        {
            string projectPath = PBXProject.GetPBXProjectPath(pathToBuiltProject);

            PBXProject project = new PBXProject();
            project.ReadFromString(File.ReadAllText(projectPath));

            var unityMainTarget = project.GetUnityMainTargetGuid();
            var unityFrameworkTarget = project.GetUnityFrameworkTargetGuid();

            var frameworksBuildPhaseUnityFrameworkTarget = project.GetFrameworksBuildPhaseByTarget(unityFrameworkTarget);

            // Copy and add each XCFramework to the build phase
            foreach (var xcFrameworksPath in xcFrameworksPaths)
            {
                string pluginDir = Path.Combine(Application.dataPath, xcFrameworksPath);
                if (Directory.Exists(pluginDir))
                {
                    DirectoryInfo dirInfo = new DirectoryInfo(pluginDir);
                    foreach (var xcFramework in dirInfo.GetDirectories("*.xcframework"))
                    {
                        var relativeDestPath = "Frameworks/" + xcFramework.Name;
                        var fullDestPath = Path.Combine(pathToBuiltProject, relativeDestPath);

                        CopyDirectory(xcFramework.ToString(), fullDestPath);

                        var xcFrameworkGuid = project.AddFile(relativeDestPath, relativeDestPath, PBXSourceTree.Source);
                        UnityEditor.iOS.Xcode.Extensions.PBXProjectExtensions.AddFileToEmbedFrameworks(project, unityMainTarget, xcFrameworkGuid);
                        project.AddFileToBuildSection(unityFrameworkTarget, frameworksBuildPhaseUnityFrameworkTarget, xcFrameworkGuid);
                        OvrAvatarLog.LogInfo($"Added {xcFramework.Name} to the Xcode project.");

                        // Remove any frameworks automatically added by Unity
                        foreach (var framework in xcFramework.GetDirectories("*.framework", SearchOption.AllDirectories))
                        {
                            string frameworkRelativePath = framework.FullName.Substring(xcFramework.FullName.Length + 1);
                            string frameworkProjectPath = $"Frameworks/{xcFrameworksPath}{xcFramework.Name}/{frameworkRelativePath}";
                            string frameworkGuid = project.FindFileGuidByProjectPath(frameworkProjectPath);

                            if (frameworkGuid != null) {
                                OvrAvatarLog.LogInfo($"Duplicate framework {frameworkRelativePath} for {xcFramework.Name} found, removing from Xcode project.");
                                project.RemoveFileFromBuild(unityFrameworkTarget, frameworkGuid);
                                project.RemoveFile(frameworkGuid);
                            }
                        }
                    }
                }
            }

            string projectSettings = project.WriteToString();
            File.WriteAllText(projectPath, projectSettings);
        }
    }
}

#endif
