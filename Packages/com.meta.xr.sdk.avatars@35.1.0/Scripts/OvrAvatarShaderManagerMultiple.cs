/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * Licensed under the Oculus SDK License Agreement (the "License");
 * you may not use the Oculus SDK except in compliance with the License,
 * which is provided at the time of installation or download, or which
 * otherwise accompanies this software in either electronic or hard copy form.
 *
 * You may obtain a copy of the License at
 *
 * https://developer.oculus.com/licenses/oculussdk/
 *
 * Unless required by applicable law or agreed to in writing, the Oculus SDK
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#nullable enable

using System.Diagnostics.CodeAnalysis;

using UnityEngine;
using UnityEngine.Serialization;

using ShaderType = Oculus.Avatar2.OvrAvatarShaderManager.ShaderType;

// ReSharper disable InconsistentNaming
// ReSharper disable RedundantDefaultMemberInitializer

// ReSharper disable once InvalidXmlDocComment
/// @file OvrAvatarShaderManagerMultiple.cs

namespace Oculus.Avatar2
{
    ///
    /// Configures shader properties for more than one shader type.
    /// There are several distinct shader types (eye, skin, hair, emissive, ...)
    /// each with their own shader configuration. The shader manager suggests
    /// the shader used to synthesize a material based off these configurations.
    /// @see OvrAvatarShaderConfiguration
    /// @see OvrAvatarShaderManagerSingle
    /// @see OvrAvatarShaderManagerBase
    ///
    public sealed class OvrAvatarShaderManagerMultiple : OvrAvatarShaderManagerBase
    {
        private const string logScope = "OvrAvatarShaderManagerMultiple";

        [SerializeField]
        [HideInInspector]
        // ReSharper disable once HeapView.ObjectAllocation.Evident
        private OvrAvatarShaderConfiguration[] configurations = new OvrAvatarShaderConfiguration[ShaderTypeCount];

        // The following requires maintenance but is an easy alternative to creating a custom Unity editor for this manager
        [SerializeField]
        private OvrAvatarShaderConfiguration? DefaultShaderConfigurationInitializer;
        [SerializeField]
        private OvrAvatarShaderConfiguration? ArrayShaderConfigurationInitializer;
        [SerializeField]
        private OvrAvatarShaderConfiguration? SolidColorShaderConfigurationInitializer;
        [SerializeField]
        private OvrAvatarShaderConfiguration? TransparentShaderConfigurationInitializer;
        // ReSharper disable once StringLiteralTypo
        [SerializeField]
        [FormerlySerializedAs("EmmisiveShaderConfigurationInitializer")]
        private OvrAvatarShaderConfiguration? EmissiveShaderConfigurationInitializer;
        [SerializeField]
        private OvrAvatarShaderConfiguration? SkinShaderConfigurationInitializer;
        [SerializeField]
        private OvrAvatarShaderConfiguration? LeftEyeShaderConfigurationInitializer;
        [SerializeField]
        private OvrAvatarShaderConfiguration? RightEyeShaderConfigurationInitializer;
        [SerializeField]
        private OvrAvatarShaderConfiguration? HairShaderConfigurationInitializer;
        [SerializeField]
        private OvrAvatarShaderConfiguration? FastLoadConfigurationInitializer;

        protected override OvrAvatarShaderConfiguration _FindConfiguration(ShaderType type)
        {
            int typeNumber = (int)type;
            if (typeNumber >= configurations.Length || configurations[typeNumber] == null)
            {
                // ReSharper disable once Unity.PerformanceCriticalCodeInvocation
                OvrAvatarLog.LogError(
                    // ReSharper disable once HeapView.BoxingAllocation
                    $"OvrAvatarShaderConfiguration for shader type [{type}] has not been initialized. Please add it to the ShaderManager."
                  , logScope, this);

                const int kDefaultIndex = (int)ShaderType.Default;
                return configurations[kDefaultIndex];
            }

            return configurations[typeNumber];
        }

        protected override bool DoInitialization() => true;

        protected override void _AutoGenerateMissingShaderConfigurations()
        {
            for (int idx = 0; idx < configurations.Length; ++idx)
            {
                InitializeAutoGeneratedConfiguration(ref configurations[idx]);
            }
        }

        [SuppressMessage("ReSharper", "Unity.PerformanceCriticalCodeNullComparison")]
        protected override void _AssignConfigurations()
        {
            if (DefaultShaderConfigurationInitializer != null)
            {
                configurations[(int)ShaderType.Default] = DefaultShaderConfigurationInitializer;
            }
            if (ArrayShaderConfigurationInitializer != null)
            {
                configurations[(int)ShaderType.Array] = ArrayShaderConfigurationInitializer;
            }
            if (SolidColorShaderConfigurationInitializer != null)
            {
                configurations[(int)ShaderType.SolidColor] = SolidColorShaderConfigurationInitializer;
            }
            if (TransparentShaderConfigurationInitializer != null)
            {
                configurations[(int)ShaderType.Transparent] = TransparentShaderConfigurationInitializer;
            }
            if (EmissiveShaderConfigurationInitializer != null)
            {
                configurations[(int)ShaderType.Emissive] = EmissiveShaderConfigurationInitializer;
            }
            if (SkinShaderConfigurationInitializer != null)
            {
                configurations[(int)ShaderType.Skin] = SkinShaderConfigurationInitializer;
            }
            if (LeftEyeShaderConfigurationInitializer != null)
            {
                configurations[(int)ShaderType.LeftEye] = LeftEyeShaderConfigurationInitializer;
            }
            if (RightEyeShaderConfigurationInitializer != null)
            {
                configurations[(int)ShaderType.RightEye] = RightEyeShaderConfigurationInitializer;
            }
            if (HairShaderConfigurationInitializer != null)
            {
                configurations[(int)ShaderType.Hair] = HairShaderConfigurationInitializer;
            }
            if (FastLoadConfigurationInitializer != null)
            {
                configurations[(int)ShaderType.FastLoad] = FastLoadConfigurationInitializer;
            }

            _AutoGenerateMissingShaderConfigurations();
        }
    }
}
