/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * Licensed under the Oculus SDK License Agreement (the "License");
 * you may not use the Oculus SDK except in compliance with the License,
 * which is provided at the time of installation or download, or which
 * otherwise accompanies this software in either electronic or hard copy form.
 *
 * You may obtain a copy of the License at
 *
 * https://developer.oculus.com/licenses/oculussdk/
 *
 * Unless required by applicable law or agreed to in writing, the Oculus SDK
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#nullable enable

using UnityEngine;

using ShaderType = Oculus.Avatar2.OvrAvatarShaderManager.ShaderType;

// ReSharper disable InconsistentNaming
// ReSharper disable RedundantDefaultMemberInitializer

// ReSharper disable once InvalidXmlDocComment
/// @file OvrAvatarShaderManagerBase.cs

namespace Oculus.Avatar2
{
    ///
    /// Configures avatar shader properties.
    /// This shader configuration is used for all avatars.
    /// This shader manager only supports one shader configuration.
    /// Use @ref OvrAvatarShaderManagerMultiple if you need more than one.
    /// @see OvrAvatarShaderManagerBase
    /// @see OvrAvatarShaderConfiguration
    ///
    public class OvrAvatarShaderManagerSingle : OvrAvatarShaderManagerBase
    {
        private const string logScope = "OvrAvatarShaderManagerSingle";

        // The following requires maintenance but is an easy alternative to creating a custom Unity editor for this manager
        [SerializeField] protected OvrAvatarShaderConfiguration? DefaultShaderConfigurationInitializer = null;
        [SerializeField] protected OvrAvatarShaderConfiguration? FastLoadConfigurationInitializer = null;

        protected override OvrAvatarShaderConfiguration _FindConfiguration(ShaderType type)
        {
            // ReSharper disable once Unity.PerformanceCriticalCodeNullComparison
            System.Diagnostics.Debug.Assert(DefaultShaderConfigurationInitializer != null);
            // ReSharper disable once Unity.PerformanceCriticalCodeNullComparison
            System.Diagnostics.Debug.Assert(FastLoadConfigurationInitializer != null);

            switch (type)
            {
                case ShaderType.Default:
                    return DefaultShaderConfigurationInitializer!;

                case ShaderType.FastLoad:
                    return FastLoadConfigurationInitializer!;
            }

            // ReSharper disable once Unity.PerformanceCriticalCodeInvocation
            OvrAvatarLog.LogError(
                // ReSharper disable once HeapView.BoxingAllocation
                $"OvrAvatarShaderConfiguration for shader type [{type}] is invalid OvrAvatarShaderManagerSingle."
                , logScope, this);
            return DefaultShaderConfigurationInitializer!;
        }

        protected override bool DoInitialization()
        {
            return (DefaultShaderConfigurationInitializer != null && FastLoadConfigurationInitializer != null);
        }

        protected override void _AssignConfigurations() { }

        protected override void _AutoGenerateMissingShaderConfigurations()
        {
            InitializeAutoGeneratedConfiguration(ref DefaultShaderConfigurationInitializer);
            InitializeAutoGeneratedConfiguration(ref FastLoadConfigurationInitializer);
        }
    }
}
