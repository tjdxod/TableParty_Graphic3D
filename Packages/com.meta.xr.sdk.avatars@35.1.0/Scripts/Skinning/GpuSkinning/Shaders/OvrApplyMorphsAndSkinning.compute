#pragma kernel CSMain

// There are a number of different options/selections for this shader
// Vertex position format (1 switch statement)
// Joint indices format (1 switch statement)
// Morph indices format (N switch statements, 1 per loop iteration)
// Next entry indices format (N switch statements)
// Position output format (1 switch statement)
// Has tangents (N + 3 switch statements)
// Single/double/triple buffer output (1 switch statement)
// Max skinning bones (1-5 if statements)

// Want to make keywords for as many as possible without blowing up
// the variant count.

#pragma multi_compile_local __ OVR_HAS_TANGENTS
#pragma multi_compile_local __ OVR_MORPH_INDEX_FORMAT_UINT16
#pragma multi_compile_local __ OVR_NEXT_ENTRY_FORMAT_UINT16 OVR_NEXT_ENTRY_FORMAT_UINT32
#pragma multi_compile_local __ OVR_MORPH_DELTA_FORMAT_SNORM10
#define NUM_THREADS_PER_WORK_GROUP 64

#include <HLSLSupport.cginc>

#include "OvrVertexCompute.cginc"
#include "OvrOutputBufferCompute.cginc"
#include "OvrMorphsCompute.cginc"
#include "OvrSkinningCompute.cginc"

#include "OvrApplyMorphsAndSkinningParams.cginc"

////////////////////////////////////////////////////////////////////////////
// Data Layout(s)
////////////////////////////////////////////////////////////////////
///
/// There are 4 buffers
///
/// "Vertex Buffer" - All the 'static data' for any number of "mesh instances".
/// Multiple "mesh instances" can share the same static data.
/// {
///   [vertex_buffer_meta_data] -> Array of "headers" which holds byte offsets and other metadata about the static mesh data
///   [neutral_positions] -> An array of "neutral pose positions"
///   [neutral_normals] -> An array of "neutral pose normals"
///   [neutral_tangents] -> An array (might be empty if no tangents) of "neutral pose tangents"
///   [joint_weights] -> An array of joint weights
///   [joint_indices] -> An array of joint indices
///   [compact_morph_target_pos_deltas] -> Array of morph target position deltas
///   [compact_morph_target_norm_deltas] -> Array of morph target position normals
///   [compact_morph_target_tan_deltas] -> Array of morph target position tangents
///   [compact_morph_target_indices] -> Array of morph target indices
///   [compact_morph_target_next_entries] -> Array of "next entry offsets"
/// }
///
///  "Per Instance Buffer" - Stores all of the "per instance" data for a mesh instance.
///  {
///    [vertex_info] -> An array of "vertex info" for the vertices of different "mesh instances"
///    [mesh_instance_meta_data] -> An array of "mesh instance meta data" for the different "mesh instances"
///    [joint_matrices] -> An array joint matrices for all mesh instances
///    [morph_target_weights] -> An array of morph target weights for all mesh instances
///    [output_slices] -> An array of "output slices" for all mesh instances
///  }
///
///  "Position output buffer" - Stores only the positions of the final output.
///  Might be interleaved "double buffered" output for same vertex next to each other
///  [positions] -> An array of output positions
///
///  "Frenet output buffer" - Stores interleaved normal + tangents (if applicable) information
///   Might be interleaved with "double buffered" output
///  [normal, tangents] -> An array of interleaved normals and tangents (if applicable)

////////////////////////////////
// Data Structures
////////////////////////////////
struct VertexBufferMetaData {
  uint positionsOffsetBytes;
  uint normalsOffsetBytes;
  uint tangentsOffsetBytes;
  uint jointWeightsOffsetBytes;

  uint jointIndicesOffsetBytes;
  uint morphTargetPosDeltasOffsetBytes;
  uint morphTargetNormDeltasOffsetBytes;
  uint morphTargetTanDeltasOffsetBytes;

  uint morphTargetIndicesOffsetBytes;
  uint morphTargetNextEntriesOffsetBytes;
  uint numMorphsPerVertOffsetBytes;
  uint numMorphedVerts;

  uint numSkinningOnlyVerts;

  float3 vertexInputPositionBias;
  float3 vertexInputPositionScale;
  float3 vertexInputNormalBias;
  float3 vertexInputNormalScale;
  float3 vertexInputTangentBias;
  float3 vertexInputTangentScale;

  float3 morphTargetsPosScale;
  float3 morphTargetsNormScale;
  float3 morphTargetsTanScale;

  // TODO* Padding/Alignment?
};

struct MeshInstanceMetaData {
  uint vertexBufferMetaDataOffsetBytes;
  uint morphTargetWeightsOffsetBytes;
  uint jointMatricesOffsetBytes;
  uint outputPositionsOffsetBytes;
  uint outputFrenetOffsetBytes;
  uint outputSliceOffsetBytes;

  uint mutableFrameStrideBytes;

  float3 vertexOutputPositionBias;
  float3 vertexOutputPositionScale;

  // TODO* Padding/Alignment?
};

struct VertexInfo {
  uint meshInstanceDataOffsetBytes;
  uint vertexBufferIndex; // Index in the vertex buffer instance
  uint outputBufferIndex; // Index in the output buffers
};


////////////////////////////////////////////////////////
// Helper Functions
////////////////////////////////////////////////////////

// Loads metadata for a specific vertex
VertexInfo OvrLoadVertexInfo(uint index) {
  // Load from vertex meta data array

  // NOTE: Keep stride in sync with definition of VertexMetaData
  static const uint kStrideBytes = 4u + 4u + 4u;

  // NOTE!!!!!!
  // Order here is very important and must match struct declaration
  // Until Shader Model 6.2 is supported by Unity, this will remain in all its fragile glory
  const uint address = kStrideBytes * index + globalParams.vertexInfoOffsetBytes;

  VertexInfo metaData;

  uint3 data = OvrLoadUint3(globalParams.perInstanceBuffer, address);
  metaData.meshInstanceDataOffsetBytes = data.x;
  metaData.vertexBufferIndex = data.y;
  metaData.outputBufferIndex = data.z;

  return metaData;
}

MeshInstanceMetaData OvrLoadMeshInstanceMetaData(VertexInfo vertexMetaData) {
  // Load from "per instance buffer"

  uint address = vertexMetaData.meshInstanceDataOffsetBytes;

  // NOTE!!!!!!
  // Order here is very important
  // Until Shader Model 6.2 is supported by Unity, this will remain in all its fragile glory
  MeshInstanceMetaData meshInstanceMetaData;

  uint4 fourUints = OvrLoadUint4(globalParams.perInstanceBuffer, address);
  meshInstanceMetaData.vertexBufferMetaDataOffsetBytes = fourUints.x;
  meshInstanceMetaData.morphTargetWeightsOffsetBytes = fourUints.y;
  meshInstanceMetaData.jointMatricesOffsetBytes = fourUints.z;
  meshInstanceMetaData.outputPositionsOffsetBytes = fourUints.w;

  address += 16u; // size of uint4
  uint3 threeUints = OvrLoadUint3(globalParams.perInstanceBuffer, address);
  meshInstanceMetaData.outputFrenetOffsetBytes = threeUints.x;
  meshInstanceMetaData.outputSliceOffsetBytes = threeUints.y;
  meshInstanceMetaData.mutableFrameStrideBytes = threeUints.z;

  address += 12u; // size of uint3
  meshInstanceMetaData.vertexOutputPositionBias = OvrUnpackFloat3x32(
      globalParams.perInstanceBuffer,
      address);

  address += 12u; // size of float3
  meshInstanceMetaData.vertexOutputPositionScale = OvrUnpackFloat3x32(
      globalParams.perInstanceBuffer,
      address);

  return meshInstanceMetaData;
}


VertexBufferMetaData OvrLoadVertexBufferMetaData(MeshInstanceMetaData meshInstanceMetaData) {
  VertexBufferMetaData metaData;

  const uint address = meshInstanceMetaData.vertexBufferMetaDataOffsetBytes;

  // NOTE!!!!!!
  // Order here is very important and must match struct declaration
  // Until Shader Model 6.2 is supported by Unity, this will remain in all its fragile glory
  uint4 fourUints = OvrLoadUint4(globalParams.vertexBuffer, address);
  metaData.positionsOffsetBytes = fourUints.x;
  metaData.normalsOffsetBytes = fourUints.y;
  metaData.tangentsOffsetBytes = fourUints.z;
  metaData.jointWeightsOffsetBytes = fourUints.w;

  fourUints = OvrLoadUint4(globalParams.vertexBuffer, address + 16u);
  metaData.jointIndicesOffsetBytes = fourUints.x;
  metaData.morphTargetPosDeltasOffsetBytes = fourUints.y;
  metaData.morphTargetNormDeltasOffsetBytes = fourUints.z;
  metaData.morphTargetTanDeltasOffsetBytes = fourUints.w;

  fourUints = OvrLoadUint4(globalParams.vertexBuffer, address + 32u);
  metaData.morphTargetIndicesOffsetBytes = fourUints.x;
  metaData.morphTargetNextEntriesOffsetBytes = fourUints.y;
  metaData.numMorphsPerVertOffsetBytes = fourUints.z;
  metaData.numMorphedVerts = fourUints.w;

  const uint oneInt = OvrLoadUint(globalParams.vertexBuffer, address + 48u);
  metaData.numSkinningOnlyVerts = oneInt;

  metaData.vertexInputPositionBias = OvrUnpackFloat3x32(globalParams.vertexBuffer, address + 52u);
  metaData.vertexInputPositionScale = OvrUnpackFloat3x32(globalParams.vertexBuffer, address + 64u);
  metaData.vertexInputNormalBias = OvrUnpackFloat3x32(globalParams.vertexBuffer, address + 76u);
  metaData.vertexInputNormalScale = OvrUnpackFloat3x32(globalParams.vertexBuffer, address + 88u);
  metaData.vertexInputTangentBias = OvrUnpackFloat3x32(globalParams.vertexBuffer, address + 100u);
  metaData.vertexInputTangentScale = OvrUnpackFloat3x32(globalParams.vertexBuffer, address + 112u);

  metaData.morphTargetsPosScale = OvrUnpackFloat3x32(globalParams.vertexBuffer, address + 124u);
  metaData.morphTargetsNormScale = OvrUnpackFloat3x32(globalParams.vertexBuffer, address + 136u);
  metaData.morphTargetsTanScale = OvrUnpackFloat3x32(globalParams.vertexBuffer, address + 148u);

  return metaData;
}

// "Slice" here meaning which of the double/triple buffer entries to write to
uint OvrGetOutputSlice(MeshInstanceMetaData meshInstanceMetaData) {
  // Grab address to read from from the mesh instance meta data
  // Compute the output slice offset in the buffer based on a "frame"
  // into unsynchronized/shared CPU/GPU memory
  uint address = meshInstanceMetaData.outputSliceOffsetBytes;
  address += globalParams.perInstanceBufferFrame * meshInstanceMetaData.mutableFrameStrideBytes;

  return OvrLoadUint(globalParams.perInstanceBuffer, address);
}

Vertex OvrGetVertexData(
    in VertexBufferMetaData vertexBufferMetaData,
    in VertexInfo vertexMetaData) {
  return OvrGetVertexData(
      vertexBufferMetaData.positionsOffsetBytes,
      vertexBufferMetaData.vertexInputPositionBias.xyz,
      vertexBufferMetaData.vertexInputPositionScale.xyz,
      vertexBufferMetaData.vertexInputNormalBias,
      vertexBufferMetaData.vertexInputNormalScale,
      vertexBufferMetaData.normalsOffsetBytes,
      vertexBufferMetaData.jointWeightsOffsetBytes,
      vertexBufferMetaData.jointIndicesOffsetBytes,
      vertexMetaData.vertexBufferIndex,
      vertexMetaData.outputBufferIndex);
}

OvrCompactMorphsParams OvrGetCompactMorphParams(
    in VertexBufferMetaData vbMetaData,
    in MeshInstanceMetaData meshInstanceMetaData,
    in Vertex vertex) {
  OvrCompactMorphsParams params;

  params.posDeltasStartAddress = vbMetaData.morphTargetPosDeltasOffsetBytes;
  params.normDeltasStartAddress = vbMetaData.morphTargetNormDeltasOffsetBytes;
  params.morphIndicesStartAddress = vbMetaData.morphTargetIndicesOffsetBytes;
  params.nextEntriesStartAddress = vbMetaData.morphTargetNextEntriesOffsetBytes;

  // Compute the morph weights offset in the buffer based on a "frame"
  // into unsynchronized/shared CPU/GPU memory
  uint weightsOffset = meshInstanceMetaData.morphTargetWeightsOffsetBytes;
  weightsOffset += globalParams.perInstanceBufferFrame  * meshInstanceMetaData.mutableFrameStrideBytes;
  params.morphTargetWeightsStartAddress = weightsOffset;

  params.posScale = vbMetaData.morphTargetsPosScale;
  params.normScale = vbMetaData.morphTargetsNormScale;

  params.vertIndex = vertex.vertexBufferIndex;

  return params;
}


void OvrApplyMorphs(
    in VertexBufferMetaData vbMetaData,
    MeshInstanceMetaData meshInstanceMetaData,
    inout Vertex vertex,
    inout float4 tangent)
{
  OvrCompactMorphsParams params = OvrGetCompactMorphParams(
    vbMetaData,
    meshInstanceMetaData,
    vertex);

  if (globalParams.applyTangents) {
    OvrCompactMorphsTangentParams tanParams;
    tanParams.tanDeltasStartAddress = vbMetaData.morphTargetTanDeltasOffsetBytes;
    tanParams.tanScale = vbMetaData.morphTargetsTanScale;

    OvrApplyCompactMorphsWithTangents(
        params,
        tanParams,
        vertex.position,
        vertex.normal,
        tangent);
  } else {
    OvrApplyCompactMorphsNoTangents(
        params,
        vertex.position,
        vertex.normal);
  }
}

////////////////////////////////////////
// Main(s)
////////////////////////////////////////

void ApplyMorphsAndSkinning(uint vertMetaDataIndex) {
  // Due to some shared memory usage, there needs to be a little work done by each thread
  // regardless if it is contributing to the output at all

  // If there are no more verts to be processed by the thread, just load some data
  // for the last valid vertex and skip writing the output
  vertMetaDataIndex = min(vertMetaDataIndex, (uint)globalParams.dispatchEndVertIndex);
  const VertexInfo vertMetaData = OvrLoadVertexInfo(vertMetaDataIndex);
  const MeshInstanceMetaData meshInstanceMetaData = OvrLoadMeshInstanceMetaData(vertMetaData);
  const VertexBufferMetaData vbMetaData = OvrLoadVertexBufferMetaData(meshInstanceMetaData);

  const bool applyMorphs = vbMetaData.numMorphedVerts > vertMetaData.vertexBufferIndex;

  uint numMorphsForVert = 0u;
  if (applyMorphs) {
    numMorphsForVert = OvrGetNumMorphTargetsAffectingVertex(
     vbMetaData.numMorphsPerVertOffsetBytes,
     vertMetaData.vertexBufferIndex);
  }
  OvrLoadMaxNumMorphsForGroup(numMorphsForVert);

  // Benchmark if this or just having some "empty" data is faster (though more memory)
  if (vertMetaDataIndex > globalParams.dispatchEndVertIndex) {
    return;
  }

  // Grab "vertex data" out of the static data
  Vertex vertex = OvrGetVertexData(vbMetaData, vertMetaData);

  float4 vertexTangent = float4(0.0, 0.0, 1.0, 1.0);
  if (globalParams.applyTangents) {
    vertexTangent = OvrGetNeutralPoseTangent(
        vbMetaData.tangentsOffsetBytes,
        vbMetaData.vertexInputTangentBias,
        vbMetaData.vertexInputTangentScale,
        vertex.vertexBufferIndex);
  }

  // Apply morphs
  if (applyMorphs) {
    OvrApplyMorphs(
      vbMetaData,
      meshInstanceMetaData,
      vertex,
      vertexTangent);
  }

  // Apply skinning

  // NOTE: The skinning matrices supplied are assumed to be on "client coordinate space".
  // so any coordinate space transformations need to occur before applying skinning
  // NOTE: Assuming uniform scaling only, no need for separate
  // normal transform
  if (globalParams.applyAdditionalTransform) {
    vertex.position.xyz = mul(globalParams.outputTransform, vertex.position).xyz;
    vertex.normal = mul(globalParams.outputTransform, float4(vertex.normal, 0.0));

    if (globalParams.applyTangents) {
      vertexTangent.xyz = mul(globalParams.outputTransform, float4(vertexTangent.xyz, 0.0)).xyz;

      // Also transform the vertexTangent w component if the the transform
      // ends up flipping the handedness
      vertexTangent.w = vertexTangent.w * globalParams.outputTransformBitangentSignFactor;
    }
  }

  const bool applySkinning = (globalParams.maxJointsPerVert > 0u) &&
    (vbMetaData.numMorphedVerts + vbMetaData.numSkinningOnlyVerts) > vertex.vertexBufferIndex;
  if (applySkinning) {
    // Compute the joint matrices offset in the buffer based on a "frame"
    // into unsynchronized/shared CPU/GPU memory
    uint matsOffset = meshInstanceMetaData.jointMatricesOffsetBytes;
    matsOffset += globalParams.perInstanceBufferFrame  * meshInstanceMetaData.mutableFrameStrideBytes;

    OvrApplySkinning(
        matsOffset,
        vertex.position,
        vertex.normal,
        vertexTangent.xyz,
        vertex.jointWeights,
        vertex.jointIndices);
  }

  StoreVertexOutput(
      meshInstanceMetaData.outputPositionsOffsetBytes,
      meshInstanceMetaData.outputFrenetOffsetBytes,
      meshInstanceMetaData.vertexOutputPositionBias.xyz,
      meshInstanceMetaData.vertexOutputPositionScale.xyz,
      vertex.position,
      vertex.normal,
      vertexTangent,
      vertex.outputBufferIndex,
      OvrGetOutputSlice(meshInstanceMetaData));
}

[numthreads(NUM_THREADS_PER_WORK_GROUP,1,1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
  // Compiler should hopefully optimize out any potential branches due to static const bool values,
  // and otherwise, branches should be based on uniform parameters passed in which
  // should make their just the branch and not cause diverging branches across workgroups
  // Compiler should also optimize out unused parameters
  const uint vertMetaDataIndex = (uint)globalParams.dispatchStartVertIndex + id.x;
  ApplyMorphsAndSkinning(vertMetaDataIndex);
}
